########
# python build stubs for package tsubasa
# File is generated by gopy. Do not edit.
# gopy gen -output=tsupy -vm=python3 github.com/js061/tsubasa

from pybindgen import retval, param, Function, Module
import sys

class CheckedFunction(Function):
    def __init__(self, *a, **kw):
        super(CheckedFunction, self).__init__(*a, **kw)
        self._failure_expression = kw.get('failure_expression', '')
        self._failure_cleanup = kw.get('failure_cleanup', '')

    def set_failure_expression(self, expr):
        self._failure_expression = expr

    def set_failure_cleanup(self, expr):
        self._failure_cleanup = expr

    def generate_call(self):
        super(CheckedFunction, self).generate_call()
        check = "PyErr_Occurred()"
        if self._failure_expression:
            check = "{} && {}".format(self._failure_expression, check)
        failure_cleanup = self._failure_cleanup or None
        self.before_call.write_error_check(check, failure_cleanup)

def add_checked_function(mod, name, retval, params, failure_expression='', *a, **kw):
    fn = CheckedFunction(name, retval, params, *a, **kw)
    fn.set_failure_expression(failure_expression)
    mod._add_function_obj(fn)
    return fn

def add_checked_string_function(mod, name, retval, params, failure_expression='', *a, **kw):
    fn = CheckedFunction(name, retval, params, *a, **kw)
    fn.set_failure_cleanup('if (retval != NULL) free(retval);')
    fn.after_call.add_cleanup_code('free(retval);')
    fn.set_failure_expression(failure_expression)
    mod._add_function_obj(fn)
    return fn

mod = Module('_tsubasa')
mod.add_include('"tsubasa_go.h"')
mod.add_function('GoPyInit', None, [])
mod.add_function('DecRef', None, [param('int64_t', 'handle')])
mod.add_function('IncRef', None, [param('int64_t', 'handle')])
mod.add_function('NumHandles', retval('int'), [])
mod.add_function('Slice_bool_CTor', retval('int64_t'), [])
mod.add_function('Slice_bool_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_bool_elem', retval('bool'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_bool_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_bool_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('bool', 'value')])
mod.add_function('Slice_bool_append', None, [param('int64_t', 'handle'), param('bool', 'value')])
mod.add_function('Slice_byte_CTor', retval('int64_t'), [])
mod.add_function('Slice_byte_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_byte_elem', retval('uint8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_byte_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_byte_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint8_t', 'value')])
mod.add_function('Slice_byte_append', None, [param('int64_t', 'handle'), param('uint8_t', 'value')])
mod.add_function('Slice_float32_CTor', retval('int64_t'), [])
mod.add_function('Slice_float32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_float32_elem', retval('float'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_float32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_float32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('float', 'value')])
mod.add_function('Slice_float32_append', None, [param('int64_t', 'handle'), param('float', 'value')])
mod.add_function('Slice_float64_CTor', retval('int64_t'), [])
mod.add_function('Slice_float64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_float64_elem', retval('double'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_float64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_float64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('double', 'value')])
mod.add_function('Slice_float64_append', None, [param('int64_t', 'handle'), param('double', 'value')])
mod.add_function('Slice_int_CTor', retval('int64_t'), [])
mod.add_function('Slice_int_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_int_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_int16_CTor', retval('int64_t'), [])
mod.add_function('Slice_int16_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int16_elem', retval('int16_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int16_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int16_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int16_t', 'value')])
mod.add_function('Slice_int16_append', None, [param('int64_t', 'handle'), param('int16_t', 'value')])
mod.add_function('Slice_int32_CTor', retval('int64_t'), [])
mod.add_function('Slice_int32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int32_elem', retval('int32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int32_t', 'value')])
mod.add_function('Slice_int32_append', None, [param('int64_t', 'handle'), param('int32_t', 'value')])
mod.add_function('Slice_int64_CTor', retval('int64_t'), [])
mod.add_function('Slice_int64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int64_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_int64_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('Slice_int8_CTor', retval('int64_t'), [])
mod.add_function('Slice_int8_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_int8_elem', retval('int8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_int8_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_int8_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int8_t', 'value')])
mod.add_function('Slice_int8_append', None, [param('int64_t', 'handle'), param('int8_t', 'value')])
mod.add_function('Slice_rune_CTor', retval('int64_t'), [])
mod.add_function('Slice_rune_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_rune_elem', retval('int32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_rune_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_rune_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int32_t', 'value')])
mod.add_function('Slice_rune_append', None, [param('int64_t', 'handle'), param('int32_t', 'value')])
mod.add_function('Slice_string_CTor', retval('int64_t'), [])
mod.add_function('Slice_string_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_string_elem', retval('char*'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_string_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_string_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('char*', 'value')])
mod.add_function('Slice_string_append', None, [param('int64_t', 'handle'), param('char*', 'value')])
mod.add_function('Slice_uint_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint_elem', retval('uint64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint64_t', 'value')])
mod.add_function('Slice_uint_append', None, [param('int64_t', 'handle'), param('uint64_t', 'value')])
mod.add_function('Slice_uint16_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint16_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint16_elem', retval('uint16_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint16_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint16_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint16_t', 'value')])
mod.add_function('Slice_uint16_append', None, [param('int64_t', 'handle'), param('uint16_t', 'value')])
mod.add_function('Slice_uint32_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint32_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint32_elem', retval('uint32_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint32_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint32_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint32_t', 'value')])
mod.add_function('Slice_uint32_append', None, [param('int64_t', 'handle'), param('uint32_t', 'value')])
mod.add_function('Slice_uint64_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint64_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint64_elem', retval('uint64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint64_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint64_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint64_t', 'value')])
mod.add_function('Slice_uint64_append', None, [param('int64_t', 'handle'), param('uint64_t', 'value')])
mod.add_function('Slice_uint8_CTor', retval('int64_t'), [])
mod.add_function('Slice_uint8_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_uint8_elem', retval('uint8_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_uint8_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_uint8_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('uint8_t', 'value')])
mod.add_function('Slice_uint8_append', None, [param('int64_t', 'handle'), param('uint8_t', 'value')])
mod.add_function('Slice_tsubasa_Point_CTor', retval('int64_t'), [])
mod.add_function('Slice_tsubasa_Point_len', retval('int'), [param('int64_t', 'handle')])
mod.add_function('Slice_tsubasa_Point_elem', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'idx')])
mod.add_function('Slice_tsubasa_Point_subslice', retval('int64_t'), [param('int64_t', 'handle'), param('int', 'st'), param('int', 'ed')])
mod.add_function('Slice_tsubasa_Point_set', None, [param('int64_t', 'handle'), param('int', 'idx'), param('int64_t', 'value')])
mod.add_function('Slice_tsubasa_Point_append', None, [param('int64_t', 'handle'), param('int64_t', 'value')])
mod.add_function('tsubasa_DataOfChannel_CTor', retval('int64_t'), [])
mod.add_function('tsubasa_Pair_CTor', retval('int64_t'), [])
mod.add_function('tsubasa_Point_CTor', retval('int64_t'), [])
mod.add_function('tsubasa_RowBWR_CTor', retval('int64_t'), [])
mod.add_function('tsubasa_RowBWRDFT_CTor', retval('int64_t'), [])
mod.add_function('tsubasa_SerializedPair_CTor', retval('int64_t'), [])
mod.add_function('tsubasa_BasicWindowDFTResult_CTor', retval('int64_t'), [])
mod.add_function('tsubasa_BasicWindowResult_CTor', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_GetLocations', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_GetMatrix', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_GetRealMatrix', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_SetBasicWindowSize', None, [param('int64_t', 'size'), param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_GetLatitudes', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_GetLatitudesIdx', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_ReadFileByLocation', None, [param('char*', 'filename'), param('char*', 'locationRangeFile'), param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_ReadFile', None, [param('char*', 'filename'), param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_ResetSketch', None, [param('bool', 'goRun')])
add_checked_string_function(mod, 'tsubasa_Sketch', retval('char*'), [])
add_checked_function(mod, 'tsubasa_AddDataFromFile', retval('char*'), [param('char*', 'filename'), param('char*', 'locationRangeFile')])
add_checked_function(mod, 'tsubasa_GetLongitudesIdx', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_Init', None, [param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_Query', retval('int64_t'), [param('double', 'thres'), param('int64_t', 'queryStart'), param('int64_t', 'queryEnd')])
add_checked_function(mod, 'tsubasa_QueryInDB', retval('int64_t'), [param('double', 'thres'), param('int64_t', 'start'), param('int64_t', 'end'), param('int64_t', 'granularity')])
add_checked_function(mod, 'tsubasa_SketchInDB', None, [param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_Slide', retval('int64_t'), [param('int64_t', 'start'), param('int64_t', 'cnt'), param('int64_t', 'qsize'), param('int64_t', 'bwsize'), param('int64_t', 'offset'), param('double', 'rho')])
add_checked_function(mod, 'tsubasa_DeleteSkecth', None, [param('bool', 'isDFT'), param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_DirectCompute', retval('int64_t'), [param('double', 'thres'), param('int64_t', 'start'), param('int64_t', 'end')])
add_checked_function(mod, 'tsubasa_GetLongitudes', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_GetDataMapInfo', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_GetNetworkUnweighted', retval('int64_t'), [param('int64_t', 'queryStart'), param('int64_t', 'length'), param('double', 'thres')])
add_checked_function(mod, 'tsubasa_InitDB', None, [param('char*', 'username'), param('char*', 'password_'), param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_InitMatrix', None, [param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_ReadFilesByLocation', retval('char*'), [param('char*', 'dirname'), param('char*', 'locationRangeFile')])
add_checked_function(mod, 'tsubasa_CutDataMap', None, [param('int64_t', 'newDataMap'), param('int64_t', 'start'), param('int64_t', 'end'), param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_GetCorrelationMatrix', retval('int64_t'), [param('int64_t', 'queryStart'), param('int64_t', 'length')])
add_checked_function(mod, 'tsubasa_GetTransitivity', retval('double'), [param('int64_t', 'arr')])
add_checked_function(mod, 'tsubasa_GetTimeSeriesNum', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_ReadFiles', retval('char*'), [param('char*', 'dirname')])
add_checked_function(mod, 'tsubasa_ClearDataMap', None, [param('bool', 'goRun')])
add_checked_function(mod, 'tsubasa_GetBasicWindowSize', retval('int64_t'), [])
add_checked_function(mod, 'tsubasa_GetNetworkWeightedRatio', retval('int64_t'), [param('int64_t', 'queryStart'), param('int64_t', 'length'), param('double', 'rho')])
add_checked_function(mod, 'tsubasa_GetNumberOfBW', retval('int64_t'), [param('int64_t', 'granularity')])
add_checked_function(mod, 'tsubasa_GetTimeSeriesLength', retval('int64_t'), [])

mod.generate(open('tsubasa.c', 'w'))

